"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getSharedManager = getSharedManager;
exports.default = void 0;

var _css = _interopRequireDefault(require("dom-helpers/css"));

var _querySelectorAll = _interopRequireDefault(require("dom-helpers/querySelectorAll"));

var _scrollbarSize = _interopRequireDefault(require("dom-helpers/scrollbarSize"));

var _ModalManager = _interopRequireDefault(require("react-overlays/ModalManager"));

const Selector = {
  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
  STICKY_CONTENT: '.sticky-top',
  NAVBAR_TOGGLER: '.navbar-toggler'
};

class BootstrapModalManager extends _ModalManager.default {
  adjustAndStore(prop, element, adjust) {
    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible
    // @ts-ignore

    element.dataset[prop] = actual;
    (0, _css.default)(element, {
      [prop]: `${parseFloat((0, _css.default)(element, prop)) + adjust}px`
    });
  }

  restore(prop, element) {
    const value = element.dataset[prop];

    if (value !== undefined) {
      delete element.dataset[prop];
      (0, _css.default)(element, {
        [prop]: value
      });
    }
  }

  setContainerStyle(containerState, container) {
    super.setContainerStyle(containerState, container);
    if (!containerState.overflowing) return;
    const size = (0, _scrollbarSize.default)();
    (0, _querySelectorAll.default)(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore('paddingRight', el, size));
    (0, _querySelectorAll.default)(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore('marginRight', el, -size));
    (0, _querySelectorAll.default)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore('marginRight', el, size));
  }

  removeContainerStyle(containerState, container) {
    super.removeContainerStyle(containerState, container);
    (0, _querySelectorAll.default)(container, Selector.FIXED_CONTENT).forEach(el => this.restore('paddingRight', el));
    (0, _querySelectorAll.default)(container, Selector.STICKY_CONTENT).forEach(el => this.restore('marginRight', el));
    (0, _querySelectorAll.default)(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore('marginRight', el));
  }

}

let sharedManager;

function getSharedManager() {
  if (!sharedManager) sharedManager = new BootstrapModalManager();
  return sharedManager;
}

var _default = BootstrapModalManager;
exports.default = _default;