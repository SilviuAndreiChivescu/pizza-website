{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from 'react-overlays/DropdownMenu';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  flip: true\n};\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignRight = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n        // Reuse alignRight to toggle the class below.\n\n        alignRight = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignRight = true;\n    }\n  }\n\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    alignEnd,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    alignEnd: alignRight,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n\n    menuProps.align = align;\n  }\n\n  let style = props.style;\n\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = { ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...menuProps,\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...((alignClasses.length || isNavbar) && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/react-bootstrap/esm/DropdownMenu.js"],"names":["classNames","React","useContext","useDropdownMenu","useMergedRefs","warning","DropdownContext","InputGroupContext","NavbarContext","useBootstrapPrefix","useWrappedRefWithWarning","alignPropType","jsx","_jsx","defaultProps","flip","DropdownMenu","forwardRef","bsPrefix","className","align","rootCloseEvent","show","showProps","renderOnMount","as","Component","popperConfig","variant","props","ref","alignRight","isNavbar","prefix","contextAlign","isInputGroup","alignClasses","keys","Object","process","env","NODE_ENV","length","brkPoint","direction","push","menuProps","hasShown","popper","alignEnd","toggle","usePopper","offset","close","style","placement","displayName"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownMenu } from 'react-overlays/DropdownMenu';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport warning from 'warning';\nimport DropdownContext from './DropdownContext';\nimport InputGroupContext from './InputGroupContext';\nimport NavbarContext from './NavbarContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  flip: true\n};\nconst DropdownMenu = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  align,\n  rootCloseEvent,\n  flip,\n  show: showProps,\n  renderOnMount,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  popperConfig,\n  variant,\n  ...props\n}, ref) => {\n  let alignRight = false;\n  const isNavbar = useContext(NavbarContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-menu');\n  const {\n    align: contextAlign\n  } = useContext(DropdownContext);\n  align = align || contextAlign;\n  const isInputGroup = useContext(InputGroupContext);\n  const alignClasses = [];\n\n  if (align) {\n    if (typeof align === 'object') {\n      const keys = Object.keys(align);\n      process.env.NODE_ENV !== \"production\" ? warning(keys.length === 1, 'There should only be 1 breakpoint when passing an object to `align`') : void 0;\n\n      if (keys.length) {\n        const brkPoint = keys[0];\n        const direction = align[brkPoint]; // .dropdown-menu-end is required for responsively aligning\n        // left in addition to align left classes.\n        // Reuse alignRight to toggle the class below.\n\n        alignRight = direction === 'start';\n        alignClasses.push(`${prefix}-${brkPoint}-${direction}`);\n      }\n    } else if (align === 'end') {\n      alignRight = true;\n    }\n  }\n\n  const [menuProps, {\n    hasShown,\n    popper,\n    show,\n    alignEnd,\n    toggle\n  }] = useDropdownMenu({\n    flip,\n    rootCloseEvent,\n    show: showProps,\n    alignEnd: alignRight,\n    usePopper: !isNavbar && alignClasses.length === 0,\n    offset: [0, 2],\n    popperConfig\n  });\n  menuProps.ref = useMergedRefs(useWrappedRefWithWarning(ref, 'DropdownMenu'), menuProps.ref);\n  if (!hasShown && !renderOnMount && !isInputGroup) return null; // For custom components provide additional, non-DOM, props;\n\n  if (typeof Component !== 'string') {\n    menuProps.show = show;\n\n    menuProps.close = () => toggle == null ? void 0 : toggle(false);\n\n    menuProps.align = align;\n  }\n\n  let style = props.style;\n\n  if (popper != null && popper.placement) {\n    // we don't need the default popper style,\n    // menus are display: none when not shown.\n    style = { ...props.style,\n      ...menuProps.style\n    };\n    props['x-placement'] = popper.placement;\n  }\n\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...menuProps,\n    style: style // Bootstrap css requires this data attrib to style responsive menus.\n    ,\n    ...((alignClasses.length || isNavbar) && {\n      'data-bs-popper': 'static'\n    }),\n    className: classNames(className, prefix, show && 'show', alignEnd && `${prefix}-end`, variant && `${prefix}-${variant}`, ...alignClasses)\n  });\n});\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = defaultProps;\nexport default DropdownMenu;"]},"metadata":{},"sourceType":"module"}