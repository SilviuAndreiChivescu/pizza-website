{"ast":null,"code":"import * as React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        verticalAlign = _cells$i$props.verticalAlign;\n    var groupChildren = [];\n    /**\n     * 为列头添加分组\n     */\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          verticalAlign: verticalAlign\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      /**\n       * 如果存在 colSpan 属性，就去找它的下一个 Cell,\n       * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格\n       */\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNullOrUndefined(cellText) || _isHeaderCell && isNullOrUndefined(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': colSpan && _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/rsuite-table/es/utils/mergeCells.js"],"names":["React","isFunction","get","ColumnGroup","HeaderCell","isNullOrUndefined","cloneCell","Cell","props","cloneElement","mergeCells","cells","nextCells","i","length","_cells$i$props","width","colSpan","groupCount","groupHeader","isHeaderCell","headerHeight","verticalAlign","groupChildren","nextWidth","left","j","nextCell","_nextCell$props","nextCellWidth","sortable","children","dataKey","onSortColumn","sortColumn","sortType","removed","push","createElement","key","header","_nextWidth","_j","_nextCell","_nextCell$props2","rowData","rowIndex","_children","colSpanWidth","_isHeaderCell","_dataKey","cellText","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        verticalAlign = _cells$i$props.verticalAlign;\n    var groupChildren = [];\n    /**\n     * 为列头添加分组\n     */\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          verticalAlign: verticalAlign\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      /**\n       * 如果存在 colSpan 属性，就去找它的下一个 Cell,\n       * 看看值是否是 isNullOrUndefined，，如果为空这可以合并这个单元格\n       */\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNullOrUndefined(cellText) || _isHeaderCell && isNullOrUndefined(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': colSpan && _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;"]},"metadata":{},"sourceType":"module"}