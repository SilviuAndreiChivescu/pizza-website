{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["React","PropTypes","Button","ButtonGroup","Dropdown","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","align","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","children","props","ref","as","Toggle","split","toString","undefined","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}