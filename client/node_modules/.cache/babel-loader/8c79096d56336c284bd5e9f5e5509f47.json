{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _CellSizeAndPositionManager = _interopRequireDefault(require(\"./CellSizeAndPositionManager\"));\n\nvar _maxElementSize = require(\"./maxElementSize.js\");\n\nvar _types = require(\"../types\");\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\n\nvar ScalingCellSizeAndPositionManager = /*#__PURE__*/function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"maxScrollSize\"]);\n    (0, _classCallCheck2[\"default\"])(this, ScalingCellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionManager\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_maxScrollSize\", void 0); // Favor composition over inheritance to simplify IE10 support\n\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager[\"default\"](params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass2[\"default\"])(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = ScalingCellSizeAndPositionManager;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_objectWithoutProperties2","_classCallCheck2","_createClass2","_defineProperty2","_CellSizeAndPositionManager","_maxElementSize","_types","ScalingCellSizeAndPositionManager","_ref","_ref$maxScrollSize","maxScrollSize","getMaxElementSize","params","_cellSizeAndPositionManager","_maxScrollSize","key","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","_ref2","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","_ref4","resetCell","_ref5","_ref6","_ref7"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,yBAAyB,GAAGN,sBAAsB,CAACC,OAAO,CAAC,gDAAD,CAAR,CAAtD;;AAEA,IAAIM,gBAAgB,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIO,aAAa,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oCAAD,CAAR,CAA1C;;AAEA,IAAIQ,gBAAgB,GAAGT,sBAAsB,CAACC,OAAO,CAAC,uCAAD,CAAR,CAA7C;;AAEA,IAAIS,2BAA2B,GAAGV,sBAAsB,CAACC,OAAO,CAAC,8BAAD,CAAR,CAAxD;;AAEA,IAAIU,eAAe,GAAGV,OAAO,CAAC,qBAAD,CAA7B;;AAEA,IAAIW,MAAM,GAAGX,OAAO,CAAC,UAAD,CAApB;AAEA;AACA;AACA;;;AACA,IAAIY,iCAAiC,GACrC,aACA,YAAY;AACV,WAASA,iCAAT,CAA2CC,IAA3C,EAAiD;AAC/C,QAAIC,kBAAkB,GAAGD,IAAI,CAACE,aAA9B;AAAA,QACIA,aAAa,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,CAAC,GAAGJ,eAAe,CAACM,iBAApB,GAAhC,GAA2EF,kBAD/F;AAAA,QAEIG,MAAM,GAAG,CAAC,GAAGZ,yBAAyB,CAAC,SAAD,CAA7B,EAA0CQ,IAA1C,EAAgD,CAAC,eAAD,CAAhD,CAFb;AAGA,KAAC,GAAGP,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuCM,iCAAvC;AACA,KAAC,GAAGJ,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuC,6BAAvC,EAAsE,KAAK,CAA3E;AACA,KAAC,GAAGA,gBAAgB,CAAC,SAAD,CAApB,EAAiC,IAAjC,EAAuC,gBAAvC,EAAyD,KAAK,CAA9D,EAN+C,CAO/C;;AACA,SAAKU,2BAAL,GAAmC,IAAIT,2BAA2B,CAAC,SAAD,CAA/B,CAA2CQ,MAA3C,CAAnC;AACA,SAAKE,cAAL,GAAsBJ,aAAtB;AACD;;AAED,GAAC,GAAGR,aAAa,CAAC,SAAD,CAAjB,EAA8BK,iCAA9B,EAAiE,CAAC;AAChEQ,IAAAA,GAAG,EAAE,oBAD2D;AAEhEhB,IAAAA,KAAK,EAAE,SAASiB,kBAAT,GAA8B;AACnC,aAAO,KAAKH,2BAAL,CAAiCI,YAAjC,KAAkD,KAAKH,cAA9D;AACD;AAJ+D,GAAD,EAK9D;AACDC,IAAAA,GAAG,EAAE,WADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASmB,SAAT,CAAmBN,MAAnB,EAA2B;AAChC,WAAKC,2BAAL,CAAiCK,SAAjC,CAA2CN,MAA3C;AACD;AAJA,GAL8D,EAU9D;AACDG,IAAAA,GAAG,EAAE,cADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASoB,YAAT,GAAwB;AAC7B,aAAO,KAAKN,2BAAL,CAAiCM,YAAjC,EAAP;AACD;AAJA,GAV8D,EAe9D;AACDJ,IAAAA,GAAG,EAAE,sBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASqB,oBAAT,GAAgC;AACrC,aAAO,KAAKP,2BAAL,CAAiCO,oBAAjC,EAAP;AACD;AAJA,GAf8D,EAoB9D;AACDL,IAAAA,GAAG,EAAE,sBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASsB,oBAAT,GAAgC;AACrC,aAAO,KAAKR,2BAAL,CAAiCQ,oBAAjC,EAAP;AACD;AACD;AACJ;AACA;AACA;;AARK,GApB8D,EA8B9D;AACDN,IAAAA,GAAG,EAAE,qBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASuB,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,UAAIC,aAAa,GAAGD,KAAK,CAACC,aAA1B;AAAA,UACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKb,2BAAL,CAAiCI,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIW,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,QAAAA,aAAa,EAAEA,aADgC;AAE/CC,QAAAA,MAAM,EAAEA,MAFuC;AAG/CC,QAAAA,SAAS,EAAEC;AAHoC,OAA1B,CAAvB;;AAMA,aAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGD,SAApB,CAA3B,CAAP;AACD;AAjBA,GA9B8D,EAgD9D;AACDX,IAAAA,GAAG,EAAE,0BADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASiC,wBAAT,CAAkCC,KAAlC,EAAyC;AAC9C,aAAO,KAAKpB,2BAAL,CAAiCmB,wBAAjC,CAA0DC,KAA1D,CAAP;AACD;AAJA,GAhD8D,EAqD9D;AACDlB,IAAAA,GAAG,EAAE,sCADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASmC,oCAAT,GAAgD;AACrD,aAAO,KAAKrB,2BAAL,CAAiCqB,oCAAjC,EAAP;AACD;AACD;;AALC,GArD8D,EA4D9D;AACDnB,IAAAA,GAAG,EAAE,cADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASkB,YAAT,GAAwB;AAC7B,aAAOa,IAAI,CAACK,GAAL,CAAS,KAAKrB,cAAd,EAA8B,KAAKD,2BAAL,CAAiCI,YAAjC,EAA9B,CAAP;AACD;AACD;;AALC,GA5D8D,EAmE9D;AACDF,IAAAA,GAAG,EAAE,0BADJ;AAEDhB,IAAAA,KAAK,EAAE,SAASqC,wBAAT,CAAkCC,KAAlC,EAAyC;AAC9C,UAAIC,WAAW,GAAGD,KAAK,CAACE,KAAxB;AAAA,UACIA,KAAK,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,MAAzB,GAAkCA,WAD9C;AAAA,UAEId,aAAa,GAAGa,KAAK,CAACb,aAF1B;AAAA,UAGIgB,aAAa,GAAGH,KAAK,CAACG,aAH1B;AAAA,UAIIC,WAAW,GAAGJ,KAAK,CAACI,WAJxB;AAKAD,MAAAA,aAAa,GAAG,KAAKE,mBAAL,CAAyB;AACvClB,QAAAA,aAAa,EAAEA,aADwB;AAEvCC,QAAAA,MAAM,EAAEe;AAF+B,OAAzB,CAAhB;;AAKA,UAAIf,MAAM,GAAG,KAAKZ,2BAAL,CAAiCuB,wBAAjC,CAA0D;AACrEG,QAAAA,KAAK,EAAEA,KAD8D;AAErEf,QAAAA,aAAa,EAAEA,aAFsD;AAGrEgB,QAAAA,aAAa,EAAEA,aAHsD;AAIrEC,QAAAA,WAAW,EAAEA;AAJwD,OAA1D,CAAb;;AAOA,aAAO,KAAKE,mBAAL,CAAyB;AAC9BnB,QAAAA,aAAa,EAAEA,aADe;AAE9BC,QAAAA,MAAM,EAAEA;AAFsB,OAAzB,CAAP;AAID;AACD;;AAzBC,GAnE8D,EA8F9D;AACDV,IAAAA,GAAG,EAAE,qBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS6C,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,UAAIrB,aAAa,GAAGqB,KAAK,CAACrB,aAA1B;AAAA,UACIC,MAAM,GAAGoB,KAAK,CAACpB,MADnB;AAEAA,MAAAA,MAAM,GAAG,KAAKiB,mBAAL,CAAyB;AAChClB,QAAAA,aAAa,EAAEA,aADiB;AAEhCC,QAAAA,MAAM,EAAEA;AAFwB,OAAzB,CAAT;AAIA,aAAO,KAAKZ,2BAAL,CAAiC+B,mBAAjC,CAAqD;AAC1DpB,QAAAA,aAAa,EAAEA,aAD2C;AAE1DC,QAAAA,MAAM,EAAEA;AAFkD,OAArD,CAAP;AAID;AAbA,GA9F8D,EA4G9D;AACDV,IAAAA,GAAG,EAAE,WADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS+C,SAAT,CAAmBb,KAAnB,EAA0B;AAC/B,WAAKpB,2BAAL,CAAiCiC,SAAjC,CAA2Cb,KAA3C;AACD;AAJA,GA5G8D,EAiH9D;AACDlB,IAAAA,GAAG,EAAE,sBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS8B,oBAAT,CAA8BkB,KAA9B,EAAqC;AAC1C,UAAIvB,aAAa,GAAGuB,KAAK,CAACvB,aAA1B;AAAA,UACIC,MAAM,GAAGsB,KAAK,CAACtB,MADnB;AAAA,UAEIC,SAAS,GAAGqB,KAAK,CAACrB,SAFtB;AAGA,aAAOA,SAAS,IAAIF,aAAb,GAA6B,CAA7B,GAAiCC,MAAM,IAAIC,SAAS,GAAGF,aAAhB,CAA9C;AACD;AAPA,GAjH8D,EAyH9D;AACDT,IAAAA,GAAG,EAAE,qBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS4C,mBAAT,CAA6BK,KAA7B,EAAoC;AACzC,UAAIxB,aAAa,GAAGwB,KAAK,CAACxB,aAA1B;AAAA,UACIC,MAAM,GAAGuB,KAAK,CAACvB,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKb,2BAAL,CAAiCI,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIS,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,eAAOF,MAAP;AACD,OAFD,MAEO;AACL,YAAIG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,UAAAA,aAAa,EAAEA,aADgC;AAE/CC,UAAAA,MAAM,EAAEA,MAFuC;AAG/CC,UAAAA,SAAS,EAAEA;AAHoC,SAA1B,CAAvB;;AAMA,eAAOI,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGH,aAApB,CAA3B,CAAP;AACD;AACF;AArBA,GAzH8D,EA+I9D;AACDT,IAAAA,GAAG,EAAE,qBADJ;AAEDhB,IAAAA,KAAK,EAAE,SAAS2C,mBAAT,CAA6BO,KAA7B,EAAoC;AACzC,UAAIzB,aAAa,GAAGyB,KAAK,CAACzB,aAA1B;AAAA,UACIC,MAAM,GAAGwB,KAAK,CAACxB,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKb,2BAAL,CAAiCI,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIS,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,eAAOF,MAAP;AACD,OAFD,MAEO;AACL,YAAIG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,UAAAA,aAAa,EAAEA,aADgC;AAE/CC,UAAAA,MAAM,EAAEA,MAFuC;AAG/CC,UAAAA,SAAS,EAAEC;AAHoC,SAA1B,CAAvB;;AAMA,eAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAIF,SAAS,GAAGF,aAAhB,CAA3B,CAAP;AACD;AACF;AArBA,GA/I8D,CAAjE;AAsKA,SAAOjB,iCAAP;AACD,CApLD,EAFA;;AAwLAT,OAAO,CAAC,SAAD,CAAP,GAAqBS,iCAArB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _CellSizeAndPositionManager = _interopRequireDefault(require(\"./CellSizeAndPositionManager\"));\n\nvar _maxElementSize = require(\"./maxElementSize.js\");\n\nvar _types = require(\"../types\");\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"maxScrollSize\"]);\n    (0, _classCallCheck2[\"default\"])(this, ScalingCellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionManager\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_maxScrollSize\", void 0);\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager[\"default\"](params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass2[\"default\"])(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = ScalingCellSizeAndPositionManager;"]},"metadata":{},"sourceType":"script"}