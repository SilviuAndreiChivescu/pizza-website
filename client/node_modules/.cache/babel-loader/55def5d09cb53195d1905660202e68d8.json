{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport on from './events/on';\nimport cancelAnimationFramePolyfill from './animation/cancelAnimationFramePolyfill';\nimport requestAnimationFramePolyfill from './animation/requestAnimationFramePolyfill';\n\nvar DOMMouseMoveTracker = /*#__PURE__*/function () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function DOMMouseMoveTracker(onMove, onMoveEnd, domNode) {\n    var _this = this;\n\n    _defineProperty(this, \"isDraggingStatus\", false);\n\n    _defineProperty(this, \"animationFrameID\", null);\n\n    _defineProperty(this, \"domNode\", void 0);\n\n    _defineProperty(this, \"onMove\", void 0);\n\n    _defineProperty(this, \"onMoveEnd\", void 0);\n\n    _defineProperty(this, \"eventMoveToken\", null);\n\n    _defineProperty(this, \"eventUpToken\", null);\n\n    _defineProperty(this, \"moveEvent\", null);\n\n    _defineProperty(this, \"deltaX\", 0);\n\n    _defineProperty(this, \"deltaY\", 0);\n\n    _defineProperty(this, \"x\", 0);\n\n    _defineProperty(this, \"y\", 0);\n\n    _defineProperty(this, \"isDragging\", function () {\n      return _this.isDraggingStatus;\n    });\n\n    _defineProperty(this, \"onMouseMove\", function (event) {\n      var x = event.clientX;\n      var y = event.clientY;\n      _this.deltaX += x - _this.x;\n      _this.deltaY += y - _this.y;\n\n      if (_this.animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\n        _this.animationFrameID = requestAnimationFramePolyfill(_this.didMouseMove);\n      }\n\n      _this.x = x;\n      _this.y = y;\n      _this.moveEvent = event;\n      event.preventDefault();\n    });\n\n    _defineProperty(this, \"didMouseMove\", function () {\n      _this.animationFrameID = null;\n\n      _this.onMove(_this.deltaX, _this.deltaY, _this.moveEvent);\n\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    });\n\n    _defineProperty(this, \"onMouseUp\", function (event) {\n      if (_this.animationFrameID) {\n        _this.didMouseMove();\n      }\n\n      _this.onMoveEnd && _this.onMoveEnd(event);\n    });\n\n    this.domNode = domNode;\n    this.onMove = onMove;\n    this.onMoveEnd = onMoveEnd;\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */\n\n\n  var _proto = DOMMouseMoveTracker.prototype;\n\n  _proto.captureMouseMoves = function captureMouseMoves(event) {\n    if (!this.eventMoveToken && !this.eventUpToken) {\n      this.eventMoveToken = on(this.domNode, 'mousemove', this.onMouseMove);\n      this.eventUpToken = on(this.domNode, 'mouseup', this.onMouseUp);\n    }\n\n    if (!this.isDraggingStatus) {\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.isDraggingStatus = true;\n      this.x = event.clientX;\n      this.y = event.clientY;\n    }\n\n    event.preventDefault();\n  }\n  /**\n   * These releases all of the listeners on document.body.\n   */\n  ;\n\n  _proto.releaseMouseMoves = function releaseMouseMoves() {\n    if (this.eventMoveToken) {\n      this.eventMoveToken.off();\n      this.eventMoveToken = null;\n    }\n\n    if (this.eventUpToken) {\n      this.eventUpToken.off();\n      this.eventUpToken = null;\n    }\n\n    if (this.animationFrameID !== null) {\n      cancelAnimationFramePolyfill(this.animationFrameID);\n      this.animationFrameID = null;\n    }\n\n    if (this.isDraggingStatus) {\n      this.isDraggingStatus = false;\n      this.x = 0;\n      this.y = 0;\n    }\n  }\n  /**\n   * Returns whether or not if the mouse movement is being tracked.\n   */\n  ;\n\n  return DOMMouseMoveTracker;\n}();\n\nexport default DOMMouseMoveTracker;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/dom-lib/es/DOMMouseMoveTracker.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","on","cancelAnimationFramePolyfill","requestAnimationFramePolyfill","DOMMouseMoveTracker","onMove","onMoveEnd","domNode","_this","isDraggingStatus","event","x","clientX","y","clientY","deltaX","deltaY","animationFrameID","didMouseMove","moveEvent","preventDefault","_proto","prototype","captureMouseMoves","eventMoveToken","eventUpToken","onMouseMove","onMouseUp","releaseMouseMoves","off"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport on from './events/on';\nimport cancelAnimationFramePolyfill from './animation/cancelAnimationFramePolyfill';\nimport requestAnimationFramePolyfill from './animation/requestAnimationFramePolyfill';\n\nvar DOMMouseMoveTracker =\n/*#__PURE__*/\nfunction () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function DOMMouseMoveTracker(onMove, onMoveEnd, domNode) {\n    var _this = this;\n\n    _defineProperty(this, \"isDraggingStatus\", false);\n\n    _defineProperty(this, \"animationFrameID\", null);\n\n    _defineProperty(this, \"domNode\", void 0);\n\n    _defineProperty(this, \"onMove\", void 0);\n\n    _defineProperty(this, \"onMoveEnd\", void 0);\n\n    _defineProperty(this, \"eventMoveToken\", null);\n\n    _defineProperty(this, \"eventUpToken\", null);\n\n    _defineProperty(this, \"moveEvent\", null);\n\n    _defineProperty(this, \"deltaX\", 0);\n\n    _defineProperty(this, \"deltaY\", 0);\n\n    _defineProperty(this, \"x\", 0);\n\n    _defineProperty(this, \"y\", 0);\n\n    _defineProperty(this, \"isDragging\", function () {\n      return _this.isDraggingStatus;\n    });\n\n    _defineProperty(this, \"onMouseMove\", function (event) {\n      var x = event.clientX;\n      var y = event.clientY;\n      _this.deltaX += x - _this.x;\n      _this.deltaY += y - _this.y;\n\n      if (_this.animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\n        _this.animationFrameID = requestAnimationFramePolyfill(_this.didMouseMove);\n      }\n\n      _this.x = x;\n      _this.y = y;\n      _this.moveEvent = event;\n      event.preventDefault();\n    });\n\n    _defineProperty(this, \"didMouseMove\", function () {\n      _this.animationFrameID = null;\n\n      _this.onMove(_this.deltaX, _this.deltaY, _this.moveEvent);\n\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    });\n\n    _defineProperty(this, \"onMouseUp\", function (event) {\n      if (_this.animationFrameID) {\n        _this.didMouseMove();\n      }\n\n      _this.onMoveEnd && _this.onMoveEnd(event);\n    });\n\n    this.domNode = domNode;\n    this.onMove = onMove;\n    this.onMoveEnd = onMoveEnd;\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */\n\n\n  var _proto = DOMMouseMoveTracker.prototype;\n\n  _proto.captureMouseMoves = function captureMouseMoves(event) {\n    if (!this.eventMoveToken && !this.eventUpToken) {\n      this.eventMoveToken = on(this.domNode, 'mousemove', this.onMouseMove);\n      this.eventUpToken = on(this.domNode, 'mouseup', this.onMouseUp);\n    }\n\n    if (!this.isDraggingStatus) {\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.isDraggingStatus = true;\n      this.x = event.clientX;\n      this.y = event.clientY;\n    }\n\n    event.preventDefault();\n  }\n  /**\n   * These releases all of the listeners on document.body.\n   */\n  ;\n\n  _proto.releaseMouseMoves = function releaseMouseMoves() {\n    if (this.eventMoveToken) {\n      this.eventMoveToken.off();\n      this.eventMoveToken = null;\n    }\n\n    if (this.eventUpToken) {\n      this.eventUpToken.off();\n      this.eventUpToken = null;\n    }\n\n    if (this.animationFrameID !== null) {\n      cancelAnimationFramePolyfill(this.animationFrameID);\n      this.animationFrameID = null;\n    }\n\n    if (this.isDraggingStatus) {\n      this.isDraggingStatus = false;\n      this.x = 0;\n      this.y = 0;\n    }\n  }\n  /**\n   * Returns whether or not if the mouse movement is being tracked.\n   */\n  ;\n\n  return DOMMouseMoveTracker;\n}();\n\nexport default DOMMouseMoveTracker;"]},"metadata":{},"sourceType":"module"}