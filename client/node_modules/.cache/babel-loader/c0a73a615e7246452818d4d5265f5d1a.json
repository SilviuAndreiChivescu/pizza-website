{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  if (!(_isArray(a) && _isArray(b))) {\n    return a !== b;\n  }\n\n  return !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/rsuite/es/utils/treeUtils.js"],"names":["_extends","_isEmpty","_clone","_isNil","_isUndefined","_isArray","_intersection","shallowEqual","shallowEqualArray","TREE_NODE_DROP_POSITION","SEARCH_BAR_HEIGHT","MENU_PADDING","TREE_NODE_GAP","shouldShowNodeByExpanded","expandItemValues","parentKeys","intersectionKeys","length","flattenTree","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","getNodeParents","parentKey","valueKey","parents","getVirtualLisHeight","inline","searchable","height","searchBarHeight","hasVisibleChildren","Array","isArray","some","child","visible","treeDeprecatedWarning","props","keys","key","console","warn","compareArray","a","b","getExpandAll","expandAll","defaultExpandAll","getExpandItemValues","defaultExpandItemValues","getExpandState","_node$childrenKey","expand","value","getDragNodeKeys","dragNode","dragNodeKeys","concat","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","removeDragNode","params","_ref","items","_index","splice","children","createUpdateTreeDataFunction","_ref2","dropNode","dropNodePosition","updateTree","_index2","findNodeOfTree","check","findNode","nodes","i","_node","undefined","filterNodesOfTree","findNodes","nextNodes","nextChildren","getExpandWhenSearching","searchKeyword"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\nvar SEARCH_BAR_HEIGHT = 48;\nvar MENU_PADDING = 12; // Tree Node 之间的 间隔\n\nvar TREE_NODE_GAP = 4;\n/**\n * 判断当前节点是否应该显示\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 获取 VirtualList 的高度\n * @param {*} inline\n * @param {*} height\n */\n\nexport function getVirtualLisHeight(inline, searchable, height) {\n  if (height === void 0) {\n    height = 0;\n  }\n\n  var searchBarHeight = searchable ? SEARCH_BAR_HEIGHT : 0;\n  return inline ? height - MENU_PADDING * 2 : height - searchBarHeight - MENU_PADDING * 2;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  if (!(_isArray(a) && _isArray(b))) {\n    return a !== b;\n  }\n\n  return !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}"]},"metadata":{},"sourceType":"module"}