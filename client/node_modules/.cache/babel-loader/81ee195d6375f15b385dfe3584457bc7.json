{"ast":null,"code":"import css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport ModalManager from 'react-overlays/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState, container) {\n    super.setContainerStyle(containerState, container);\n    if (!containerState.overflowing) return;\n    const size = getScrollbarSize();\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore('paddingRight', el, size));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore('marginRight', el, -size));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore('marginRight', el, size));\n  }\n\n  removeContainerStyle(containerState, container) {\n    super.removeContainerStyle(containerState, container);\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore('paddingRight', el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore('marginRight', el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore('marginRight', el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager() {\n  if (!sharedManager) sharedManager = new BootstrapModalManager();\n  return sharedManager;\n}\nexport default BootstrapModalManager;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/react-bootstrap/esm/BootstrapModalManager.js"],"names":["css","qsa","getScrollbarSize","ModalManager","Selector","FIXED_CONTENT","STICKY_CONTENT","NAVBAR_TOGGLER","BootstrapModalManager","adjustAndStore","prop","element","adjust","actual","style","dataset","parseFloat","restore","value","undefined","setContainerStyle","containerState","container","overflowing","size","forEach","el","removeContainerStyle","sharedManager","getSharedManager"],"mappings":"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","sourcesContent":["import css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport ModalManager from 'react-overlays/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState, container) {\n    super.setContainerStyle(containerState, container);\n    if (!containerState.overflowing) return;\n    const size = getScrollbarSize();\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore('paddingRight', el, size));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore('marginRight', el, -size));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore('marginRight', el, size));\n  }\n\n  removeContainerStyle(containerState, container) {\n    super.removeContainerStyle(containerState, container);\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore('paddingRight', el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore('marginRight', el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore('marginRight', el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager() {\n  if (!sharedManager) sharedManager = new BootstrapModalManager();\n  return sharedManager;\n}\nexport default BootstrapModalManager;"]},"metadata":{},"sourceType":"module"}