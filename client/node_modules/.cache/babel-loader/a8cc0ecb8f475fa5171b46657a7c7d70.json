{"ast":null,"code":"import qsa from 'dom-helpers/querySelectorAll';\nimport * as React from 'react';\nimport { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nconst noop = () => {};\n\nconst AbstractNav = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'ul',\n  onSelect,\n  activeKey,\n  role,\n  onKeyDown,\n  ...props\n}, ref) => {\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  const forceUpdate = useForceUpdate();\n  const needsRefocusRef = useRef(false);\n  const parentOnSelect = useContext(SelectableContext);\n  const tabContext = useContext(TabContext);\n  let getControlledId, getControllerId;\n\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  const listNode = useRef(null);\n\n  const getNextActiveChild = offset => {\n    const currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    const items = qsa(currentListNode, '[data-rb-event-key]:not(.disabled)');\n    const activeChild = currentListNode.querySelector('.active');\n    if (!activeChild) return null;\n    const index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    let nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  const handleSelect = (key, event) => {\n    if (key == null) return;\n    onSelect == null ? void 0 : onSelect(key, event);\n    parentOnSelect == null ? void 0 : parentOnSelect(key, event);\n  };\n\n  const handleKeyDown = event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n    let nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(() => {\n    if (listNode.current && needsRefocusRef.current) {\n      const activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      activeChild == null ? void 0 : activeChild.focus();\n    }\n\n    needsRefocusRef.current = false;\n  });\n  const mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(NavContext.Provider, {\n      value: {\n        role,\n        // used by NavLink to determine it's role\n        activeKey: makeEventKey(activeKey),\n        getControlledId: getControlledId || noop,\n        getControllerId: getControllerId || noop\n      },\n      children: /*#__PURE__*/_jsx(Component, { ...props,\n        onKeyDown: handleKeyDown,\n        ref: mergedRef,\n        role: role\n      })\n    })\n  });\n});\nexport default AbstractNav;","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/react-bootstrap/esm/AbstractNav.js"],"names":["qsa","React","useContext","useEffect","useRef","useForceUpdate","useMergedRefs","NavContext","SelectableContext","makeEventKey","TabContext","jsx","_jsx","noop","AbstractNav","forwardRef","as","Component","onSelect","activeKey","role","onKeyDown","props","ref","forceUpdate","needsRefocusRef","parentOnSelect","tabContext","getControlledId","getControllerId","listNode","getNextActiveChild","offset","currentListNode","current","items","activeChild","querySelector","index","indexOf","nextIndex","length","handleSelect","key","event","handleKeyDown","nextActiveChild","preventDefault","dataset","rbEventKey","focus","mergedRef","Provider","value","children"],"mappings":"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","sourcesContent":["import qsa from 'dom-helpers/querySelectorAll';\nimport * as React from 'react';\nimport { useContext, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport NavContext from './NavContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport TabContext from './TabContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\nconst AbstractNav = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'ul',\n  onSelect,\n  activeKey,\n  role,\n  onKeyDown,\n  ...props\n}, ref) => {\n  // A ref and forceUpdate for refocus, b/c we only want to trigger when needed\n  // and don't want to reset the set in the effect\n  const forceUpdate = useForceUpdate();\n  const needsRefocusRef = useRef(false);\n  const parentOnSelect = useContext(SelectableContext);\n  const tabContext = useContext(TabContext);\n  let getControlledId, getControllerId;\n\n  if (tabContext) {\n    role = role || 'tablist';\n    activeKey = tabContext.activeKey;\n    getControlledId = tabContext.getControlledId;\n    getControllerId = tabContext.getControllerId;\n  }\n\n  const listNode = useRef(null);\n\n  const getNextActiveChild = offset => {\n    const currentListNode = listNode.current;\n    if (!currentListNode) return null;\n    const items = qsa(currentListNode, '[data-rb-event-key]:not(.disabled)');\n    const activeChild = currentListNode.querySelector('.active');\n    if (!activeChild) return null;\n    const index = items.indexOf(activeChild);\n    if (index === -1) return null;\n    let nextIndex = index + offset;\n    if (nextIndex >= items.length) nextIndex = 0;\n    if (nextIndex < 0) nextIndex = items.length - 1;\n    return items[nextIndex];\n  };\n\n  const handleSelect = (key, event) => {\n    if (key == null) return;\n    onSelect == null ? void 0 : onSelect(key, event);\n    parentOnSelect == null ? void 0 : parentOnSelect(key, event);\n  };\n\n  const handleKeyDown = event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n    let nextActiveChild;\n\n    switch (event.key) {\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        nextActiveChild = getNextActiveChild(-1);\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowDown':\n        nextActiveChild = getNextActiveChild(1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (!nextActiveChild) return;\n    event.preventDefault();\n    handleSelect(nextActiveChild.dataset.rbEventKey, event);\n    needsRefocusRef.current = true;\n    forceUpdate();\n  };\n\n  useEffect(() => {\n    if (listNode.current && needsRefocusRef.current) {\n      const activeChild = listNode.current.querySelector('[data-rb-event-key].active');\n      activeChild == null ? void 0 : activeChild.focus();\n    }\n\n    needsRefocusRef.current = false;\n  });\n  const mergedRef = useMergedRefs(ref, listNode);\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(NavContext.Provider, {\n      value: {\n        role,\n        // used by NavLink to determine it's role\n        activeKey: makeEventKey(activeKey),\n        getControlledId: getControlledId || noop,\n        getControllerId: getControllerId || noop\n      },\n      children: /*#__PURE__*/_jsx(Component, { ...props,\n        onKeyDown: handleKeyDown,\n        ref: mergedRef,\n        role: role\n      })\n    })\n  });\n});\nexport default AbstractNav;"]},"metadata":{},"sourceType":"module"}