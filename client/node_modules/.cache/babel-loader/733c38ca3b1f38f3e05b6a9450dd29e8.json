{"ast":null,"code":"import getDay from \"date-fns/get_day\";\nimport addDays from \"date-fns/add_days\";\n/**\n * Get all weeks of this month\n * @params monthDate\n * @return date[]\n */\n\nexport default function getMonthView(monthDate, isoWeek) {\n  var firstDayOfMonth = getDay(monthDate);\n  var distance = 0 - firstDayOfMonth;\n\n  if (isoWeek) {\n    distance = 1 - firstDayOfMonth;\n\n    if (firstDayOfMonth === 0) {\n      distance = -6;\n    }\n  }\n\n  var firstWeekendDate = addDays(monthDate, distance);\n  var weeks = [firstWeekendDate];\n  var nextWeekendDate = addDays(firstWeekendDate, 7);\n  weeks.push(nextWeekendDate);\n\n  while (weeks.length < 6) {\n    nextWeekendDate = addDays(nextWeekendDate, 7);\n    weeks.push(nextWeekendDate);\n  }\n\n  return weeks;\n}","map":{"version":3,"sources":["E:/OneDrive - University of Salford/Desktop/pizza-website/node_modules/rsuite/es/utils/getMonthView.js"],"names":["getDay","addDays","getMonthView","monthDate","isoWeek","firstDayOfMonth","distance","firstWeekendDate","weeks","nextWeekendDate","push","length"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0C;AACvD,MAAIC,eAAe,GAAGL,MAAM,CAACG,SAAD,CAA5B;AACA,MAAIG,QAAQ,GAAG,IAAID,eAAnB;;AAEA,MAAID,OAAJ,EAAa;AACXE,IAAAA,QAAQ,GAAG,IAAID,eAAf;;AAEA,QAAIA,eAAe,KAAK,CAAxB,EAA2B;AACzBC,MAAAA,QAAQ,GAAG,CAAC,CAAZ;AACD;AACF;;AAED,MAAIC,gBAAgB,GAAGN,OAAO,CAACE,SAAD,EAAYG,QAAZ,CAA9B;AACA,MAAIE,KAAK,GAAG,CAACD,gBAAD,CAAZ;AACA,MAAIE,eAAe,GAAGR,OAAO,CAACM,gBAAD,EAAmB,CAAnB,CAA7B;AACAC,EAAAA,KAAK,CAACE,IAAN,CAAWD,eAAX;;AAEA,SAAOD,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACvBF,IAAAA,eAAe,GAAGR,OAAO,CAACQ,eAAD,EAAkB,CAAlB,CAAzB;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAWD,eAAX;AACD;;AAED,SAAOD,KAAP;AACD","sourcesContent":["import getDay from \"date-fns/get_day\";\nimport addDays from \"date-fns/add_days\";\n\n/**\n * Get all weeks of this month\n * @params monthDate\n * @return date[]\n */\nexport default function getMonthView(monthDate, isoWeek) {\n  var firstDayOfMonth = getDay(monthDate);\n  var distance = 0 - firstDayOfMonth;\n\n  if (isoWeek) {\n    distance = 1 - firstDayOfMonth;\n\n    if (firstDayOfMonth === 0) {\n      distance = -6;\n    }\n  }\n\n  var firstWeekendDate = addDays(monthDate, distance);\n  var weeks = [firstWeekendDate];\n  var nextWeekendDate = addDays(firstWeekendDate, 7);\n  weeks.push(nextWeekendDate);\n\n  while (weeks.length < 6) {\n    nextWeekendDate = addDays(nextWeekendDate, 7);\n    weeks.push(nextWeekendDate);\n  }\n\n  return weeks;\n}"]},"metadata":{},"sourceType":"module"}